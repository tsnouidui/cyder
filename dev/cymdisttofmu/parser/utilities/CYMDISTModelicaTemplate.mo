model {{model_name}}
  "Block that exchanges a vector of real values with CYMDIST"
  extends Modelica.Blocks.Interfaces.DiscreteBlock(
    startTime=0,
    firstTrigger(fixed=true, start=false));
///////////// THE CODE BELOW HAS BEEN AUTOGENERATED //////////////   
  {%- for dict_item in scalar_variables %}
  {%- if (dict_item["causality"])== "parameter" %}
  parameter {{dict_item["vartype"]}} {{dict_item["name"]}}(unit="{{dict_item["unit"]}}") = {{dict_item["start"]}}
    "{{dict_item["description"]}}";
  {%- elif (dict_item["causality"])== "input" %}
  Modelica.Blocks.Interfaces.RealInput {{dict_item["name"]}}(start={{dict_item["start"]}}, unit="{{dict_item["unit"]}}")
    "{{dict_item["description"]}}"{{dict_item["annotation"]}};
  {%- elif (dict_item["causality"])== "output" %}
  Modelica.Blocks.Interfaces.RealOutput {{dict_item["name"]}} (unit="{{dict_item["unit"]}}")
    "{{dict_item["description"]}}"{{dict_item["annotation"]}};
  {%- endif -%}
  {% endfor %}
 
  //parameter String inputFileName=Modelica.Utilities.Files.loadResource("{{input_file_path}}") 
  // "Name of the CYMDIST input file";
  parameter String inputFileName="{{input_file_path}}"  "Name of the CYMDIST input file";
protected   
  parameter Integer resWri={{write_results}} 
    "Flag for enabling results writing. 1: write results, 0: else";
  parameter Integer nDblPar={{parameter_variable_names|length}} 
    "Number of double parameter values to sent to CYMDIST";
  parameter Integer nDblInp(min=1)={{input_variable_names|length}} 
    "Number of double input values to sent to CYMDIST";
  parameter Integer nDblOut(min=1)={{output_variable_names|length}}  
    "Number of double output values to receive from CYMDIST";
  parameter Integer flaDblInp[nDblInp]=zeros(nDblInp)
    "Flag for double values (0: use current value, 
    1: use average over interval, 2: use integral over interval)";
  
  Real uRInt[nDblInp] "Value of integral";
  Real uRIntPre[nDblInp] "Value of integral at previous sampling instance";
  Real dblInpVal[nDblInp] "Value to be sent to CYMDIST";
  {% if (input_variable_names|length==0) -%} 
  Real uR[nDblInp]
    "Variables used to collect values to be sent to CYMDIST";
  {%- else %}
  {% set comma = joiner(",") -%}  
  Real uR[nDblInp]={
  {%- for row in modelica_input_variable_names -%}
  {{comma()}}
  {{row}}
  {%- endfor %} 
  }"Variables used to collect values to be sent to CYMDIST";
  {%- endif %}
  {% if (output_variable_names|length==0) -%} 
  Real yR[nDblOut]
    "Variables used to collect values received from CYMDIST";
  {%- else %} 
  {% set comma = joiner(",") -%} 
  Real yR[nDblOut]={
  {%- for row in modelica_concat_output_variable_names -%}
  {{comma()}}
  {{row}}
  {%- endfor %} 
  }"Variables used to collect values received from CYMDIST";
  {%- endif %}
  {% if (input_variable_names|length==0) -%} 
  parameter String dblInpNam[nDblInp]
    "Input variables names to be sent to CYMDIST";
  parameter String dblInpTyp[nDblInp]
    "Input variables types to be sent to CYMDIST"; 
  parameter String dblInpLoc[nDblInp]
    "Input variables locations to be sent to CYMDIST";
  {%- else %}
  {% set comma = joiner(",") -%}   
  parameter String dblInpNam[nDblInp]={
  {%- for row in input_variable_names -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %} 
  }"Input variables names to be sent to CYMDIST"; 
  {% set comma = joiner(",") -%}   
  parameter String dblInpTyp[nDblInp]={
  {%- for row in input_types -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %} 
  }"Input variables types to be sent to CYMDIST";
  {% set comma = joiner(",") -%}   
  parameter String dblInpLoc[nDblInp]={
  {%- for row in input_locations -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %} 
  }"Input variables locations to be sent to CYMDIST";
  {%- endif %}
  
  {% if (output_variable_names|length==0) -%} 
  parameter String dblOutNam[nDblOut]
    "Output variables names to be received from CYMDIST";
  parameter String dblOutLoc[nDblOut] 
    "Output variables locations to be sent to CYMDIST";
  {%- else %}
  {% set comma = joiner(",") -%} 
  parameter String dblOutNam[nDblOut]={
  {%- for row in output_variable_names -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %} 
  }"Output variables names to be received from CYMDIST";
  {% set comma = joiner(",") -%}
  parameter String dblOutLoc[nDblOut]={
  {%- for row in output_locations -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %}
  }"Output variables locations to be sent to CYMDIST";
  {%- endif %}
  {% if (parameter_variable_names|length==0) -%} 
  parameter String dblParNam[nDblPar](each start="") 
    "Parameter variables names to be sent to CYMDIST";
  {%- else %}
  {% set comma = joiner(",") -%}
  parameter String dblParNam[nDblPar]={
  {%- for row in parameter_variable_names -%}
  {{comma()}}
  "{{row}}"
  {%- endfor %}
  }"Parameter variables names to be sent to CYMDIST";
  {%- endif %}
  {% if (parameter_variable_names|length==0) -%} 
  parameter Real dblParVal[nDblPar]=zeros(nDblPar)
    "Parameter variables values to be sent to CYMDIST";
  {%- else %}
  {% set comma = joiner(",") -%} 
  parameter Real dblParVal[nDblPar]={
  {%- for row in parameter_variable_values -%}
  {{comma()}}
  {{row}}
  {%- endfor %}
  }"Parameter variables values to be sent to CYMDIST";
  {%- endif %}
  
///////////// THE CODE ABOVE HAS BEEN AUTOGENERATED //////////////  
  
  parameter String moduleName="cyme72"
    "Name of the python module that contains the function";
  parameter String functionName="exchange" 
    "Name of the python function";
  
initial equation 
  dblInpVal    =  pre(uR);
  uRInt    =  zeros(nDblInp);
  uRIntPre =  zeros(nDblInp);
  for i in 1:nDblInp loop
    assert(flaDblInp[i]>=0 and flaDblInp[i]<=2,
      "Parameter flaDblInp out of range for " + String(i) + "-th component.");
  end for;
  // The assignment of yR avoids the warning
  // "initial conditions for variables of type Real are not fully specified".
  // At startTime, the sampleTrigger is true and hence this value will
  // be overwritten.

  yR = zeros(nDblOut);
equation 
  for i in 1:nDblInp loop
    der(uRInt[i]) = if (flaDblInp[i] > 0) then uR[i] else 0;
  end for;
   
  when {sampleTrigger} then
    // Compute values that will be sent to CYMDIST
    for i in 1:nDblInp loop
      if (flaDblInp[i] == 0) then
        // Send the current value.
        dblInpVal[i] = pre(uR[i]); 
      else
        // Integral over the sampling interval
        dblInpVal[i] = uRInt[i] - pre(uRIntPre[i]);
        if (flaDblInp[i] == 1) then
          // Average value over the sampling interval
          dblInpVal[i] =  dblInpVal[i]/samplePeriod;  
        end if;
      end if;
    end for;
      
    // Exchange data
    yR = CYMDISTToFMU.Python34.Functions.cymdist(
      moduleName=moduleName,
      functionName=functionName,
      inputFileName=inputFileName,
      nDblInp=nDblInp,
      dblInpNam=dblInpNam,
      dblInpTyp=dblInpTyp,
      dblInpLoc=dblInpLoc,
      dblInpVal=dblInpVal,
      nDblOut=nDblOut,
      dblOutNam=dblOutNam,
      dblOutLoc=dblOutLoc,
      nDblPar=nDblPar,
      dblParNam=dblParNam,
      dblParVal=dblParVal,
      resWri=resWri);
  // Store current value of integral
  uRIntPre= uRInt;
  end when;    
end {{model_name}};
